/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export type Decimal = string;
export interface GetArithmeticTwapResponse {
  twap: Decimal;
  [k: string]: unknown;
}
export interface GetArithmeticTwapToNowResponse {
  twap: Decimal;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  [k: string]: unknown;
}
export type QueryMsg = {
  get_arithmetic_twap: {
    base_asset_denom: string;
    end_time: number;
    id: number;
    quote_asset_denom: string;
    start_time: number;
    [k: string]: unknown;
  };
} | {
  get_arithmetic_twap_to_now: {
    base_asset_denom: string;
    id: number;
    quote_asset_denom: string;
    start_time: number;
    [k: string]: unknown;
  };
};
export type Addr = string;
export interface State {
  owner: Addr;
  [k: string]: unknown;
}
export interface TwapReadOnlyInterface {
  contractAddress: string;
  getArithmeticTwap: ({
    baseAssetDenom,
    endTime,
    id,
    quoteAssetDenom,
    startTime
  }: {
    baseAssetDenom: string;
    endTime: number;
    id: number;
    quoteAssetDenom: string;
    startTime: number;
  }) => Promise<GetArithmeticTwapResponse>;
  getArithmeticTwapToNow: ({
    baseAssetDenom,
    id,
    quoteAssetDenom,
    startTime
  }: {
    baseAssetDenom: string;
    id: number;
    quoteAssetDenom: string;
    startTime: number;
  }) => Promise<GetArithmeticTwapToNowResponse>;
}
export class TwapQueryClient implements TwapReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getArithmeticTwap = this.getArithmeticTwap.bind(this);
    this.getArithmeticTwapToNow = this.getArithmeticTwapToNow.bind(this);
  }

  getArithmeticTwap = async ({
    baseAssetDenom,
    endTime,
    id,
    quoteAssetDenom,
    startTime
  }: {
    baseAssetDenom: string;
    endTime: number;
    id: number;
    quoteAssetDenom: string;
    startTime: number;
  }): Promise<GetArithmeticTwapResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_arithmetic_twap: {
        base_asset_denom: baseAssetDenom,
        end_time: endTime,
        id,
        quote_asset_denom: quoteAssetDenom,
        start_time: startTime
      }
    });
  };
  getArithmeticTwapToNow = async ({
    baseAssetDenom,
    id,
    quoteAssetDenom,
    startTime
  }: {
    baseAssetDenom: string;
    id: number;
    quoteAssetDenom: string;
    startTime: number;
  }): Promise<GetArithmeticTwapToNowResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_arithmetic_twap_to_now: {
        base_asset_denom: baseAssetDenom,
        id,
        quote_asset_denom: quoteAssetDenom,
        start_time: startTime
      }
    });
  };
}