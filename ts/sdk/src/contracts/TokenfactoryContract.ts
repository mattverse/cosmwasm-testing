/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export type ExecuteMsg = {
  create_denom: {
    subdenom: string;
    [k: string]: unknown;
  };
} | {
  change_admin: {
    denom: string;
    new_admin_address: string;
    [k: string]: unknown;
  };
} | {
  mint_tokens: {
    amount: Uint128;
    denom: string;
    mint_to_address: string;
    [k: string]: unknown;
  };
} | {
  burn_tokens: {
    amount: Uint128;
    burn_from_address: string;
    denom: string;
    [k: string]: unknown;
  };
};
export type Uint128 = string;
export interface GetDenomResponse {
  denom: string;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  [k: string]: unknown;
}
export type QueryMsg = {
  get_denom: {
    creator_address: string;
    subdenom: string;
    [k: string]: unknown;
  };
};
export type Addr = string;
export interface State {
  owner: Addr;
  [k: string]: unknown;
}
export interface TokenfactoryReadOnlyInterface {
  contractAddress: string;
  getDenom: ({
    creatorAddress,
    subdenom
  }: {
    creatorAddress: string;
    subdenom: string;
  }) => Promise<GetDenomResponse>;
}
export class TokenfactoryQueryClient implements TokenfactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getDenom = this.getDenom.bind(this);
  }

  getDenom = async ({
    creatorAddress,
    subdenom
  }: {
    creatorAddress: string;
    subdenom: string;
  }): Promise<GetDenomResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_denom: {
        creator_address: creatorAddress,
        subdenom
      }
    });
  };
}
export interface TokenfactoryInterface extends TokenfactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createDenom: ({
    subdenom
  }: {
    subdenom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  changeAdmin: ({
    denom,
    newAdminAddress
  }: {
    denom: string;
    newAdminAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  mintTokens: ({
    amount,
    denom,
    mintToAddress
  }: {
    amount: string;
    denom: string;
    mintToAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  burnTokens: ({
    amount,
    burnFromAddress,
    denom
  }: {
    amount: string;
    burnFromAddress: string;
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export class TokenfactoryClient extends TokenfactoryQueryClient implements TokenfactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createDenom = this.createDenom.bind(this);
    this.changeAdmin = this.changeAdmin.bind(this);
    this.mintTokens = this.mintTokens.bind(this);
    this.burnTokens = this.burnTokens.bind(this);
  }

  createDenom = async ({
    subdenom
  }: {
    subdenom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_denom: {
        subdenom
      }
    }, fee, memo, funds);
  };
  changeAdmin = async ({
    denom,
    newAdminAddress
  }: {
    denom: string;
    newAdminAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_admin: {
        denom,
        new_admin_address: newAdminAddress
      }
    }, fee, memo, funds);
  };
  mintTokens = async ({
    amount,
    denom,
    mintToAddress
  }: {
    amount: string;
    denom: string;
    mintToAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_tokens: {
        amount,
        denom,
        mint_to_address: mintToAddress
      }
    }, fee, memo, funds);
  };
  burnTokens = async ({
    amount,
    burnFromAddress,
    denom
  }: {
    amount: string;
    burnFromAddress: string;
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn_tokens: {
        amount,
        burn_from_address: burnFromAddress,
        denom
      }
    }, fee, memo, funds);
  };
}