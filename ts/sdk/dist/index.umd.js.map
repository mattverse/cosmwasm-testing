{"version":3,"file":"index.umd.js","sources":["../src/contracts/CounterContract.ts","../src/contracts/TokenfactoryContract.ts"],"sourcesContent":["/**\n* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the cosmwasm-typescript-gen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nexport type ExecuteMsg = {\n  increment: {\n    [k: string]: unknown;\n  };\n} | {\n  reset: {\n    count: number;\n    [k: string]: unknown;\n  };\n};\nexport interface GetCountResponse {\n  count: number;\n  [k: string]: unknown;\n}\nexport interface InstantiateMsg {\n  count: number;\n  [k: string]: unknown;\n}\nexport type QueryMsg = {\n  get_count: {\n    [k: string]: unknown;\n  };\n};\nexport type Addr = string;\nexport interface State {\n  count: number;\n  owner: Addr;\n  [k: string]: unknown;\n}\nexport interface CounterReadOnlyInterface {\n  contractAddress: string;\n  getCount: () => Promise<GetCountResponse>;\n}\nexport class CounterQueryClient implements CounterReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getCount = this.getCount.bind(this);\n  }\n\n  getCount = async (): Promise<GetCountResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_count: {}\n    });\n  };\n}\nexport interface CounterInterface extends CounterReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  increment: (fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n  reset: ({\n    count\n  }: {\n    count: number;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n}\nexport class CounterClient extends CounterQueryClient implements CounterInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.increment = this.increment.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  increment = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      increment: {}\n    }, fee, memo, funds);\n  };\n  reset = async ({\n    count\n  }: {\n    count: number;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      reset: {\n        count\n      }\n    }, fee, memo, funds);\n  };\n}","/**\n* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the cosmwasm-typescript-gen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nexport type ExecuteMsg = {\n  create_denom: {\n    subdenom: string;\n    [k: string]: unknown;\n  };\n} | {\n  change_admin: {\n    denom: string;\n    new_admin_address: string;\n    [k: string]: unknown;\n  };\n} | {\n  mint_tokens: {\n    amount: Uint128;\n    denom: string;\n    mint_to_address: string;\n    [k: string]: unknown;\n  };\n} | {\n  burn_tokens: {\n    amount: Uint128;\n    burn_from_address: string;\n    denom: string;\n    [k: string]: unknown;\n  };\n};\nexport type Uint128 = string;\nexport interface GetDenomResponse {\n  denom: string;\n  [k: string]: unknown;\n}\nexport interface InstantiateMsg {\n  [k: string]: unknown;\n}\nexport type QueryMsg = {\n  get_denom: {\n    creator_address: string;\n    subdenom: string;\n    [k: string]: unknown;\n  };\n};\nexport type Addr = string;\nexport interface State {\n  owner: Addr;\n  [k: string]: unknown;\n}\nexport interface TokenfactoryReadOnlyInterface {\n  contractAddress: string;\n  getDenom: ({\n    creatorAddress,\n    subdenom\n  }: {\n    creatorAddress: string;\n    subdenom: string;\n  }) => Promise<GetDenomResponse>;\n}\nexport class TokenfactoryQueryClient implements TokenfactoryReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getDenom = this.getDenom.bind(this);\n  }\n\n  getDenom = async ({\n    creatorAddress,\n    subdenom\n  }: {\n    creatorAddress: string;\n    subdenom: string;\n  }): Promise<GetDenomResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_denom: {\n        creator_address: creatorAddress,\n        subdenom\n      }\n    });\n  };\n}\nexport interface TokenfactoryInterface extends TokenfactoryReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  createDenom: ({\n    subdenom\n  }: {\n    subdenom: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n  changeAdmin: ({\n    denom,\n    newAdminAddress\n  }: {\n    denom: string;\n    newAdminAddress: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n  mintTokens: ({\n    amount,\n    denom,\n    mintToAddress\n  }: {\n    amount: string;\n    denom: string;\n    mintToAddress: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n  burnTokens: ({\n    amount,\n    burnFromAddress,\n    denom\n  }: {\n    amount: string;\n    burnFromAddress: string;\n    denom: string;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n}\nexport class TokenfactoryClient extends TokenfactoryQueryClient implements TokenfactoryInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.createDenom = this.createDenom.bind(this);\n    this.changeAdmin = this.changeAdmin.bind(this);\n    this.mintTokens = this.mintTokens.bind(this);\n    this.burnTokens = this.burnTokens.bind(this);\n  }\n\n  createDenom = async ({\n    subdenom\n  }: {\n    subdenom: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      create_denom: {\n        subdenom\n      }\n    }, fee, memo, funds);\n  };\n  changeAdmin = async ({\n    denom,\n    newAdminAddress\n  }: {\n    denom: string;\n    newAdminAddress: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      change_admin: {\n        denom,\n        new_admin_address: newAdminAddress\n      }\n    }, fee, memo, funds);\n  };\n  mintTokens = async ({\n    amount,\n    denom,\n    mintToAddress\n  }: {\n    amount: string;\n    denom: string;\n    mintToAddress: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      mint_tokens: {\n        amount,\n        denom,\n        mint_to_address: mintToAddress\n      }\n    }, fee, memo, funds);\n  };\n  burnTokens = async ({\n    amount,\n    burnFromAddress,\n    denom\n  }: {\n    amount: string;\n    burnFromAddress: string;\n    denom: string;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      burn_tokens: {\n        amount,\n        burn_from_address: burnFromAddress,\n        denom\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":[],"mappings":"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"}